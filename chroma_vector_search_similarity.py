# -*- coding: utf-8 -*-
"""Chroma_Vector_Search_Similarity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mWi0ZqnE7n-ixgVJt-Q5PcPO_ckJiPWs
"""

!pip install langchain chromadb pandas



!pip install flask
!pip install pyngrok

import ast

!pip install -U langchain-community

import pandas as pd
from langchain.vectorstores import Chroma
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
import chromadb

import numpy as np

import pandas as pd
import ast
import chromadb
from chromadb.config import Settings

import certifi
import json
import requests

from google.colab import drive

drive.mount('/content/drive')

from pyngrok import ngrok, conf

# Replace YOUR_AUTHTOKEN with your actual token (keep it secret!)
conf.get_default().auth_token = "2veZlzROCUlL5khI6b8DEralkMJ_etx8Abvwa9sGfWimz2yh"

def get_rows(user_input):
    file_path = '/content/drive/My Drive/startup/combined_output.csv'

    # Read the .txt file into a DataFrame
    df_new = pd.read_csv(file_path)
    df_unique = df_new[~df_new['name'].duplicated(keep=False)]
    df_unique['Embeddings'] = df_unique['Embeddings'].apply(
    lambda x: np.fromstring(x.strip("[]"), sep=',').tolist() if isinstance(x, str) else x
    )

    df_first_5000 = df_unique.head(5000)
    # Initialize Chroma DB
    client = chromadb.Client(Settings(anonymized_telemetry=False))
    collection = client.create_collection(name="my_collection_32")

    # Insert documents
    collection.add(
    ids=df_first_5000 ['name'].astype(str).tolist(),  # make sure IDs are strings
    embeddings=df_first_5000['Embeddings'].tolist())

    resulting_df = pd.read_csv('/content/drive/My Drive/startup/startups_embeddings.csv')
    resulting_df['Embeddings'] = resulting_df['Embeddings'].apply(
    lambda x: np.fromstring(x.strip("[]"), sep=',').tolist() if isinstance(x, str) else x
    )

    result = resulting_df.loc[resulting_df['Startup Name'] == user_input, 'Embeddings'].values
    query_embedding = result
    results = collection.query(query_embeddings=[query_embedding], n_results=3)
    ids = results['ids'][0]
    distances = results['distances'][0]

    # Filter based on distance threshold
    threshold = 0.60
    filtered_ids = [id_ for id_, dist in zip(ids, distances) if dist <= threshold]
    filtered_df = df_first_5000[df_first_5000['name'].isin(filtered_ids)]
    print("!!!!!!!!!!!")
    print(filtered_df)
    return filtered_df

from flask import Flask, request, render_template_string
import pandas as pd
from pyngrok import ngrok
import threading

app = Flask(__name__)

html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Input Processor</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f9f9f9;
            padding: 40px;
        }

        .container {
            max-width: 700px;
            margin: auto;
            background: #fff;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        input[type="text"] {
            width: 100%;
            padding: 12px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 8px;
        }

        button {
            padding: 10px 20px;
            background: #28a745;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 25px;
        }

        table, th, td {
            border: 1px solid #ddd;
        }

        th, td {
            padding: 12px;
            text-align: center;
        }

        th {
            background: #f4f4f4;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>üìã Enter the name of the Swiss Start up</h2>
        <form method="POST">
            <input type="text" name="user_input" placeholder="Enter something..." required>
            <button type="submit">Submit</button>
        </form>

        {% if table_html %}
            <h3>üßæ Resulting Table:</h3>
            {{ table_html | safe }}
        {% endif %}
    </div>
</body>
</html>
"""

@app.route("/", methods=["GET", "POST"])
def index():
    table_html = None
    if request.method == "POST":
        user_input = request.form.get("user_input")
        df = get_rows(user_input)
        print(df)
        # Sample: Build a DataFrame from input (you can replace this with real logic)

        table_html = df.to_html(classes='data', index=False, border=0)

    return render_template_string(html_template, table_html=table_html)

# Start ngrok and Flask
def run():
    app.run(port=5000, debug=True)

public_url = ngrok.connect(5000)
print(f"üåê Your app is live at: {public_url}/")

threading.Thread(target=run).start()